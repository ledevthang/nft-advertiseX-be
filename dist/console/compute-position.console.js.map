{"version":3,"file":"compute-position.console.js","sourceRoot":"","sources":["../../src/console/compute-position.console.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,6DAA4D;AAC5D,mDAAwD;AACxD,2BAA4B;AAKrB,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,8BAAa;IAChD,YAAoB,MAAqB;QACvC,KAAK,EAAE,CAAC;QADU,WAAM,GAAN,MAAM,CAAe;IAEzC,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,GAAG;QACP,MAAM,MAAM,GAAG,IAAI,WAAM,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAEpD,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;QAEvB,MAAM,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QAEzC,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YACnC,MAAM,MAAM,CAAC,KAAK,CAAC;;;;;;;;;;;;;;;;;;;WAmBd,CAAC,CAAC;YAEP,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAChC,CAAC;IAEO,KAAK,CAAC,wBAAwB;QACpC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAA;;;;;;;;;;;;KAY5B,CAAC;QAEF,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAA;;;;;;;;;KAS5B,CAAC;IACJ,CAAC;CACF,CAAA;AAtEY,0CAAe;0BAAf,eAAe;IAH3B,IAAA,wBAAO,EAAC;QACP,IAAI,EAAE,kBAAkB;KACzB,CAAC;qCAE4B,8BAAa;GAD9B,eAAe,CAsE3B","sourcesContent":["import { OnModuleInit } from \"@nestjs/common\";\nimport { PrismaService } from \"@root/prisma/prisma.service\";\nimport { CommandRunner, Command } from \"nest-commander\";\nimport { Client } from \"pg\";\n\n@Command({\n  name: \"compute-position\",\n})\nexport class PositionConsole extends CommandRunner implements OnModuleInit {\n  constructor(private prisma: PrismaService) {\n    super();\n  }\n\n  async onModuleInit() {\n    await this.createTriggerAndListener();\n  }\n\n  async run(): Promise<void> {\n    const client = new Client(process.env.DATABASE_URL);\n\n    await client.connect();\n\n    await client.query(\"LISTEN nfts_change\");\n\n    client.on(\"notification\", async () => {\n      await client.query(`\n        WITH nft_ext AS (\n        SELECT\n        \"nft\".\"id\",\n        row_number() OVER (\n          ORDER BY \"nft\".\"square_price\" DESC NULLS LAST\n        ) AS \"index\"\n        FROM \"nft\"\n        WHERE \"nft\".\"is_active\" = true\n      )\n      UPDATE nft\n      SET\n        \"position\" = (\n          SELECT \"nft_ext\".\"index\"\n          FROM \"nft_ext\"\n          WHERE \"nft\".\"id\" = \"nft_ext\".\"id\"\n          LIMIT 1\n        )\n      WHERE is_active = true\n          `);\n\n      console.log(\"done\");\n    });\n\n    console.log(\"listening nfts\");\n  }\n\n  private async createTriggerAndListener() {\n    await this.prisma.$executeRaw`\n        CREATE OR REPLACE FUNCTION nfts_change_listener()\n            RETURNS TRIGGER AS $$\n            BEGIN\n                IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN\n                    PERFORM pg_notify('nfts_change', row_to_json(NEW)::text);\n                ELSE          \n                    PERFORM pg_notify('nfts_change', row_to_json(OLD)::text);\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql;\n    `;\n\n    await this.prisma.$executeRaw`\n        CREATE OR REPLACE TRIGGER nfts_change \n            AFTER \n                INSERT \n                OR DELETE \n                OR UPDATE OF square_price, is_active\n            ON nft\n            FOR EACH ROW \n            EXECUTE PROCEDURE nfts_change_listener();\n    `;\n  }\n}\n"]}