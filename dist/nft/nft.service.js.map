{"version":3,"file":"nft.service.js","sourceRoot":"","sources":["../../src/nft/nft.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"@root/prisma/prisma.service\";\nimport { CreateNftPayload } from \"./parsers/create-nft\";\nimport { fetchNft } from \"@root/shared/services/fetch-nft\";\nimport { DateTime } from \"luxon\";\nimport { ParseNftQuery } from \"./parsers/parse-nft\";\nimport { EstimateNftQuery } from \"./parsers/estimate-nft\";\nimport { positionMap } from \"@root/shared/helpers/calculate-position\";\nimport { SearchNftsQuery } from \"./parsers/search-nft\";\nimport { ActiveNftPayload } from \"./parsers/active-nft\";\nimport { createPayment } from \"@root/contract/payment\";\n\n@Injectable()\nexport class NftService {\n  constructor(private prisma: PrismaService) {}\n\n  async createNft({\n    chain,\n    tokenAddress,\n    tokenId,\n    duration,\n  }: CreateNftPayload) {\n    const nft = await fetchNft({\n      tokenAddress,\n      tokenId,\n      chain,\n    });\n\n    return this.prisma.nft.create({\n      data: {\n        token_address: tokenAddress,\n        token_id: tokenId,\n        image_url: nft.image_url,\n        opensea_url: nft.opensea_url,\n        animation_url: nft.animation_url,\n        description: nft.description,\n        duration,\n        name: nft.name,\n      },\n    });\n  }\n\n  async parseNft({ tokenAddress, tokenId }: ParseNftQuery) {\n    const nft = await fetchNft({\n      tokenAddress,\n      tokenId,\n    });\n\n    return {\n      id: nft.identifier,\n      nftName: nft.name,\n      chain: \"ethereum\",\n      tokenId: nft.identifier,\n      tokenAddress: nft.contract,\n      imageUrl: nft.image_url,\n      price: undefined,\n      isActive: false,\n      marketplace: \"opensea\",\n    };\n  }\n\n  async activeNft({ amount, id }: ActiveNftPayload) {\n    const result = await createPayment(amount);\n\n    const nft = await this.prisma.nft.findUnique({\n      where: {\n        id,\n      },\n    });\n\n    if (!nft) {\n      throw new Error(\"not found nft when active\");\n    }\n\n    const squarePrice = amount / nft.duration;\n\n    await this.prisma.nft.update({\n      where: {\n        id,\n      },\n      data: {\n        amount,\n        is_active: true,\n        square_price: squarePrice,\n        payment_date: DateTime.now().toJSDate(),\n      },\n    });\n\n    return {\n      hash: result.hash,\n    };\n  }\n\n  async estimateNft({ position, squarePrice }: EstimateNftQuery) {\n    if (squarePrice) {\n      const matchedNft = await this.prisma.nft.findFirst({\n        orderBy: [\n          {\n            square_price: \"desc\",\n          },\n          {\n            id: \"desc\",\n          },\n        ],\n        where: {\n          square_price: {\n            lte: squarePrice,\n          },\n          is_active: true,\n        },\n      });\n\n      return {\n        avgTime: 0,\n        squarePrice: matchedNft?.square_price || squarePrice,\n        blockNumber:\n          positionMap?.[matchedNft?.position || 1001]?.blockNumber || 12,\n        postionOnCategories: [\n          {\n            name: \"NFT\",\n            position:\n              matchedNft?.position ||\n              (await this.prisma.nft.count({ where: { is_active: true } })) + 1,\n          },\n        ],\n      };\n    } else {\n      const matchedNft = await this.prisma.nft.findFirst({\n        where: {\n          is_active: true,\n          position,\n        },\n      });\n\n      return {\n        avgTime: 0,\n        squarePrice: matchedNft?.square_price || squarePrice,\n        blockNumber:\n          positionMap?.[matchedNft?.position || 1001]?.blockNumber || 12,\n        postionOnCategories: [\n          {\n            name: \"NFT\",\n            position: matchedNft?.position || position,\n          },\n        ],\n      };\n    }\n  }\n\n  async search({ pageNumber, pageSize }: SearchNftsQuery) {\n    let [nfts, total] = await Promise.all([\n      this.prisma.nft.findMany({\n        orderBy: {\n          position: \"asc\",\n        },\n        where: {\n          is_active: true,\n          position: {\n            gt: 0,\n          },\n        },\n      }),\n      this.prisma.nft.count({\n        where: {\n          is_active: true,\n          position: {\n            gt: 0,\n          },\n        },\n      }),\n    ]);\n\n    const nftsMapped = nfts.map((nft) => ({\n      nftName: nft.name,\n      chain: \"ethereum\",\n      marketplace: \"opensea\",\n      tokenId: nft.token_id,\n      tokenAddress: nft.token_address,\n      originalUrl: nft.opensea_url,\n      position: nft.position,\n      squarePrice: nft.square_price,\n      isActive: nft.is_active,\n      imageUrl: nft.image_url,\n    }));\n\n    return {\n      data: nftsMapped,\n      pageNumber: 1,\n      pageSize: 1000,\n      total: 10,\n    };\n  }\n\n  async getMeNfts() {\n    const nfts = await this.prisma.nft.findMany({\n      orderBy: {\n        id: \"desc\",\n      },\n    });\n\n    const nftsMapped = nfts.map((nft) => ({\n      nftName: nft.name,\n      chain: \"ethereum\",\n      marketplace: \"opensea\",\n      tokenId: nft.token_id,\n      tokenAddress: nft.token_address,\n      originalUrl: nft.opensea_url,\n      position: nft.position,\n      squarePrice: nft.square_price,\n      isActive: nft.is_active,\n      imageUrl: nft.image_url,\n    }));\n\n    return {\n      data: nftsMapped,\n      pageNumber: 1000,\n      pageSize: 1,\n      total: 900,\n    };\n  }\n}\n"]}