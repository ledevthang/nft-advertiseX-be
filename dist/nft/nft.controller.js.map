{"version":3,"file":"nft.controller.js","sourceRoot":"","sources":["../../src/nft/nft.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAQwB;AACxB,6CAA0C;AAC1C,qDAAwD;AACxD,+CAA2C;AAC3C,mDAAoD;AACpD,yDAA0D;AAC1D,qDAAuD;AACvD,qDAAwD;AAIjD,IAAM,aAAa,GAAnB,MAAM,aAAa;IACxB,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAI9C,MAAM,CAAU,KAAsB;QACpC,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAID,QAAQ,CAAU,KAAuB;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAGD,QAAQ,CAAU,KAAoB;QACpC,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAGD,SAAS,CAAS,IAAsB;QACtC,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAGD,SAAS;QACP,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;IACrC,CAAC;IAGD,SAAS,CAAS,IAAsB;QACtC,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;CACF,CAAA;AAlCY,sCAAa;AAKxB;IAFC,IAAA,YAAG,EAAC,QAAQ,CAAC;IACb,IAAA,iBAAQ,EAAC,IAAI,uBAAc,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1C,WAAA,IAAA,cAAK,GAAE,CAAA;;qCAAQ,4BAAe;;2CAErC;AAID;IAFC,IAAA,YAAG,EAAC,UAAU,CAAC;IACf,IAAA,iBAAQ,EAAC,IAAI,uBAAc,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACxC,WAAA,IAAA,cAAK,GAAE,CAAA;;qCAAQ,+BAAgB;;6CAExC;AAGD;IADC,IAAA,YAAG,EAAC,OAAO,CAAC;IACH,WAAA,IAAA,cAAK,GAAE,CAAA;;qCAAQ,yBAAa;;6CAErC;AAGD;IADC,IAAA,aAAI,EAAC,QAAQ,CAAC;IACJ,WAAA,IAAA,aAAI,GAAE,CAAA;;qCAAO,6BAAgB;;8CAEvC;AAGD;IADC,IAAA,YAAG,EAAC,IAAI,CAAC;;;;8CAGT;AAGD;IADC,IAAA,aAAI,GAAE;IACI,WAAA,IAAA,aAAI,GAAE,CAAA;;qCAAO,6BAAgB;;8CAEvC;wBAjCU,aAAa;IAFzB,IAAA,mBAAU,EAAC,MAAM,CAAC;IAClB,IAAA,iBAAO,EAAC,MAAM,CAAC;qCAEkB,wBAAU;GAD/B,aAAa,CAkCzB","sourcesContent":["import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Query,\n  UsePipes,\n  ValidationPipe,\n} from \"@nestjs/common\";\nimport { ApiTags } from \"@nestjs/swagger\";\nimport { CreateNftPayload } from \"./parsers/create-nft\";\nimport { NftService } from \"./nft.service\";\nimport { ParseNftQuery } from \"./parsers/parse-nft\";\nimport { EstimateNftQuery } from \"./parsers/estimate-nft\";\nimport { SearchNftsQuery } from \"./parsers/search-nft\";\nimport { ActiveNftPayload } from \"./parsers/active-nft\";\n\n@Controller(\"nfts\")\n@ApiTags(\"nfts\")\nexport class NftController {\n  constructor(private nftService: NftService) {}\n\n  @Get(\"search\")\n  @UsePipes(new ValidationPipe({ transform: true }))\n  search(@Query() query: SearchNftsQuery) {\n    return this.nftService.search(query);\n  }\n\n  @Get(\"estimate\")\n  @UsePipes(new ValidationPipe({ transform: true }))\n  estimate(@Query() query: EstimateNftQuery) {\n    return this.nftService.estimateNft(query);\n  }\n\n  @Get(\"parse\")\n  parseNft(@Query() query: ParseNftQuery) {\n    return this.nftService.parseNft(query);\n  }\n\n  @Post(\"active\")\n  activeNft(@Body() body: ActiveNftPayload) {\n    return this.nftService.activeNft(body);\n  }\n\n  @Get(\"me\")\n  getMyNfts() {\n    return this.nftService.getMeNfts();\n  }\n\n  @Post()\n  createNft(@Body() body: CreateNftPayload) {\n    return this.nftService.createNft(body);\n  }\n}\n"]}